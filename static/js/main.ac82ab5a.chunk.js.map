{"version":3,"sources":["components/Skeleton.js","components/Header.jsx","components/CountryChart.jsx","components/SelectCountry.jsx","components/LineChart.jsx","context/ThemeContext.js","App.js","reportWebVitals.js","index.js","api/index.js"],"names":["Loading","className","animation","HeaderComponent","props","icon","faVirus","color","themeState","background","theme","light","Tooltip","title","onClick","setThemeState","dark","style","cursor","marginRight","faSun","size","faMoon","href","faGithub","foreground","CountryLineChart","deaths","dates","allDeaths","Object","keys","forEach","key","push","data","labels","map","date","Date","toDateString","datasets","label","borderColor","borderWidth","backgroundColor","fill","tension","CardComponent","lazy","SelectCountry","useState","countries","setCountries","country","setCountry","dailyData","setDailyData","error","setError","loading","setLoading","useEffect","a","fetchCountriesData","fetchCountriesAPI","then","response","handleCountryChange","fetchCountryInfo","fetchCountryDailyData","dailyInfo","timeline","Container","Typography","gutterBottom","variant","component","faFlag","faSearch","FormControl","cardBackground","NativeSelect","defaultValue","onChange","e","target","value","index","fallback","src","countryInfo","flag","alt","Grid","container","spacing","justifyContent","cardTitle","todayCases","cardSubtitle","lastUpdate","updated","faViruses","todayRecovered","faClinicMedical","todayDeaths","faSkullCrossbones","cases","recovered","faHandHoldingMedical","faSkull","item","xs","md","hoverOffset","faBan","LineChart","fetchDailyData","result","dayBeforeCases","dayBeforeDeaths","dayBeforeRecovered","fetchResult","allCases","allRecovered","infectedLineChart","deathLineChart","maxWidth","themes","ThemeContext","React","createContext","Cards","App","useContext","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","document","getElementById","fetchGlobalData","axios","get"],"mappings":"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","file":"static/js/main.ac82ab5a.chunk.js","sourcesContent":["import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nexport const Loading = () => {\n\n    return (\n        <div className=\"skeleton\">\n            <Skeleton />\n            <Skeleton animation={false} />\n            <Skeleton animation='wave' />\n        </div>\n    );\n}","import React from \"react\";\nimport {Tooltip} from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMoon, faSun, faVirus} from \"@fortawesome/free-solid-svg-icons\";\nimport {faGithub} from \"@fortawesome/free-brands-svg-icons\";\n\nexport const HeaderComponent = (props) => {\n    const darkMode = () => {\n        props.setThemeState(props.theme.dark);\n    };\n    const lightMode = () => {\n        props.setThemeState(props.theme.light);\n    };\n\n    return(\n        <div className=\"header-component\">\n            <div className=\"header-text\">\n                <h2><FontAwesomeIcon icon={faVirus} color=\"red\"/> Covid-19 Reports Worldwide <FontAwesomeIcon icon={faVirus} color=\"red\"/> </h2>\n            </div>\n            <div className=\"header-icons\">\n                {\n                    (props.themeState.background === props.theme.light.background) ? (\n                        <Tooltip title=\"Turn Dark Mode On \">\n                            <span onClick={darkMode} style={{cursor:\"pointer\",marginRight: '.5rem'}}>\n                                <FontAwesomeIcon icon={faSun} size=\"2x\"/>\n                            </span>\n                        </Tooltip>\n                    ) : (\n                        <Tooltip title=\"Turn Dark Mode Off\">\n                            <span onClick={lightMode} style={{cursor:\"pointer\",marginRight: '.5rem'}}>\n                                <FontAwesomeIcon icon={faMoon} color=\"white\" size=\"2x\"/>\n                            </span>\n                        </Tooltip>\n                    )\n                }\n                <Tooltip title=\"Source Code\">\n                    <a style={{ marginRight: '.5rem' }} href=\"https://github.com/SiamAnzir/covid-19-reports-worldwide\">\n                        <FontAwesomeIcon icon={faGithub} size=\"2x\" color={props.themeState.foreground}/>\n                    </a>\n                </Tooltip>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {Line} from \"react-chartjs-2\";\nimport {Loading} from \"./Skeleton\";\n\nexport const CountryLineChart = (props) => {\n    if (!props.deaths) {\n        return <Loading/>;\n    }\n    let dates = [];\n    let allDeaths = [];\n    Object.keys(props.deaths).forEach(key => {\n        dates.push(key);\n        allDeaths.push(props.deaths[key]);\n    });\n    return(\n        <div className=\"chart-container\">\n            <Line\n                data={{\n                    labels: dates.map(date => new Date(date).toDateString()),\n                    datasets: [{\n                        data: allDeaths.map((data) => data),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        borderWidth: 0.1,\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: false,\n                        tension: 0.1,\n                    },\n                    ],\n                }}\n            />\n        </div>\n    )\n};","// noinspection JSUnresolvedVariable\n\nimport React, {useState, useEffect, lazy,Suspense} from \"react\";\nimport {fetchCountriesData,fetchCountryInfo,fetchCountryDailyData} from \"../api\";\nimport {FormControl, NativeSelect, Container, Typography, Grid} from \"@material-ui/core\";\nimport {Pie} from \"react-chartjs-2\";\nimport {CountryLineChart} from \"./CountryChart\";\nimport {Loading} from \"./Skeleton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faBan,\n    faClinicMedical, faFlag,\n    faHandHoldingMedical, faSearch,\n    faSkull,\n    faSkullCrossbones,\n    faVirus, faViruses\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst CardComponent = lazy(() => import('./CardComponent'));\n\nexport const SelectCountry = (props) => {\n\n    const [countries, setCountries] = useState([]);\n    const [country, setCountry] = useState({});\n    const [dailyData,setDailyData] = useState({});\n    const [error,setError] = useState(false);\n    const [loading,setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchCountriesAPI = async () => {\n            setCountries(await fetchCountriesData());\n        };\n\n        fetchCountriesAPI().then(response => response);\n    }, []);\n    const handleCountryChange = async (country) => {\n        setLoading(true);\n        const data = await fetchCountryInfo(country);\n        if(data){\n            setCountry(data);\n            setLoading(false);\n        }\n        const dailyInfo = await fetchCountryDailyData(country);\n        if(dailyInfo.data){\n            setDailyData(dailyInfo.data.timeline);\n            setError(false);\n            setLoading(false);\n        }else {\n            setError(true);\n            setLoading(false);\n        }\n    }\n    if(loading){\n        return <Loading/>;\n    }\n    return(\n        <Container className=\"selectCountry\">\n            <br/>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\"><FontAwesomeIcon icon={faFlag} /> Country Base Reports <FontAwesomeIcon icon={faSearch}/> </Typography>\n            <FormControl className=\"formControl\" style={{ backgroundColor: props.themeState.cardBackground,\n                color: props.themeState.foreground}}>\n                <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} style={{ backgroundColor: props.themeState.cardBackground,\n                    color: props.themeState.foreground}}>\n                    <option value=\"\" style={{ backgroundColor: props.themeState.cardBackground,\n                        color: props.themeState.foreground}}> Select Country</option>\n                    {countries.map((country, index) => <option key={index} value={country} style={{ backgroundColor: props.themeState.cardBackground,\n                        color: props.themeState.foreground}}>{country}</option>)}\n                </NativeSelect>\n            </FormControl>\n            {\n                (!country.data) ? (\n                    <div>\n                        <Typography><FontAwesomeIcon icon={faBan}/> No Country Selected</Typography>\n                    </div>\n                ) : (\n                    <Container>\n                        <div className=\"card-container\">\n                            <Suspense fallback={<Loading/>}>\n                                <Typography gutterBottom variant=\"h5\" component=\"h3\">Showing Results for {country.data.country} <img className=\"flagLogo\" src={country.data.countryInfo.flag} alt=\"countryFlag\"/> </Typography>\n                                <br/>\n                                <Grid container spacing={3} justifyContent=\"center\">\n                                    <CardComponent\n                                        className=\"infected\"\n                                        cardTitle=\"Last 24 hours Infected\"\n                                        value={country.data.todayCases}\n                                        cardSubtitle=\"Active cases for COVID-19.\"\n                                        lastUpdate={country.data.updated}\n                                        cardBackground={props.themeState.cardBackground}\n                                        foreground={props.themeState.foreground}\n                                        icon={faViruses}\n                                    />\n                                    <CardComponent\n                                        className=\"recovered\"\n                                        cardTitle=\"Last 24 hours Recovered\"\n                                        value={country.data.todayRecovered}\n                                        cardSubtitle=\"Recoveries from COVID-19.\"\n                                        lastUpdate={country.data.updated}\n                                        cardBackground={props.themeState.cardBackground}\n                                        foreground={props.themeState.foreground}\n                                        icon={faClinicMedical}\n                                    />\n                                    <CardComponent\n                                        className=\"deaths\"\n                                        cardTitle=\"Last 24 hours Deaths\"\n                                        value={country.data.todayDeaths}\n                                        cardSubtitle=\"Deaths caused by COVID-19.\"\n                                        lastUpdate={country.data.updated}\n                                        cardBackground={props.themeState.cardBackground}\n                                        foreground={props.themeState.foreground}\n                                        icon={faSkullCrossbones}\n                                    />\n                                </Grid>\n                            </Suspense>\n                            <br/>\n                            <br/>\n                            <Suspense fallback={<Loading/>}>\n                                <Grid container spacing={3} justifyContent=\"center\">\n                                    <CardComponent\n                                        className=\"infected\"\n                                        cardTitle=\"Total Infected\"\n                                        value={country.data.cases}\n                                        cardSubtitle=\"Active cases for COVID-19.\"\n                                        lastUpdate={country.data.updated}\n                                        cardBackground={props.themeState.cardBackground}\n                                        foreground={props.themeState.foreground}\n                                        icon={faVirus}\n                                    />\n                                    <CardComponent\n                                        className=\"recovered\"\n                                        cardTitle=\"Total Recovered\"\n                                        value={country.data.recovered}\n                                        cardSubtitle=\"Recoveries from COVID-19.\"\n                                        lastUpdate={country.data.updated}\n                                        cardBackground={props.themeState.cardBackground}\n                                        foreground={props.themeState.foreground}\n                                        icon={faHandHoldingMedical}\n                                    />\n                                    <CardComponent\n                                        className=\"deaths\"\n                                        cardTitle=\"Total Deaths\"\n                                        value={country.data.deaths}\n                                        cardSubtitle=\"Deaths caused by COVID-19.\"\n                                        lastUpdate={country.data.updated}\n                                        cardBackground={props.themeState.cardBackground}\n                                        foreground={props.themeState.foreground}\n                                        icon={faSkull}\n                                    />\n                                </Grid>\n                            </Suspense>\n                        </div>\n                        <div>\n                            <Grid container spacing={3} justifyContent=\"center\">\n                                <Grid item xs={12} md={6} className=\"chart-container\" style={{ backgroundColor: props.themeState.cardBackground,\n                                    color: props.themeState.foreground}}>\n                                    {\n                                        (error) ? (\n                                            <Typography>Country not found or doesn't have any historical data</Typography>\n                                        ) : (\n                                            <CountryLineChart deaths={dailyData.deaths}/>\n                                        )\n                                    }\n                                </Grid>\n                                <Grid item xs={12} md={3} className=\"pie-chart-container\" style={{ backgroundColor: props.themeState.cardBackground,\n                                    color: props.themeState.foreground}}>\n                                    <Pie\n                                        data = {{\n                                            labels:['Infected', 'Recovered', 'Deaths'],\n                                            datasets: [{\n                                                label: 'Covid-19 Reports',\n                                                data: [country.data.cases,country.data.recovered, country.data.deaths],\n                                                backgroundColor: [\n                                                    'rgba(0,0,255,0.5)',\n                                                    'rgba(0, 255, 0,0.5)',\n                                                    'rgba(255,0, 0,0.5)'\n                                                ],\n                                                hoverOffset: 4\n                                            }]\n                                        }}\n                                    />\n                                    <br/>\n                                    <Typography>Total Infected,Recovered & Deaths</Typography>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Container>\n                )\n            }\n        </Container>\n    )\n};\n","import React, {useEffect, useState} from \"react\";\nimport {Line} from \"react-chartjs-2\";\nimport {fetchDailyData} from \"../api\";\nimport { Container, Typography} from \"@material-ui/core\";\nimport {Loading} from \"./Skeleton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {faHandHoldingMedical,faSkullCrossbones, faVirus} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const LineChart = (props) => {\n    const [dailyData,setDailyData] = useState([]);\n    useEffect(\n        () => {\n            const fetchResult = async () => {\n                const result = await fetchDailyData();\n                const {\n                    data: {\n                        cases: dayBeforeCases,\n                        deaths: dayBeforeDeaths,\n                        recovered: dayBeforeRecovered,\n                    },\n                } = result;\n                setDailyData([dayBeforeCases, dayBeforeDeaths, dayBeforeRecovered]);\n            };\n            fetchResult().then(response => response);\n        },[]\n    );\n    if (!dailyData[0]) {\n        return <Loading/>;\n    }\n    let dates = [];\n    let allCases = [];\n    let allDeaths = [];\n    let allRecovered = [];\n    Object.keys(dailyData[0]).forEach(key => {\n        dates.push(key);\n        allCases.push(dailyData[0][key]);\n    });\n    Object.keys(dailyData[1]).forEach(key => {\n        allDeaths.push(dailyData[1][key]);\n    });\n    Object.keys(dailyData[2]).forEach(key => {\n        allRecovered.push(dailyData[2][key]);\n    });\n    const infectedLineChart = (\n        dailyData[0] ? (\n            <Line\n                data={{\n                    labels: dates.map(date => new Date(date).toDateString()),\n                    datasets: [{\n                        data: allCases.map((data) => data),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: false,\n                        tension: 0.1,\n                    },{\n                        data: allRecovered.map((data) => data),\n                        label: 'Recovered',\n                        borderColor: 'green',\n                        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n                        fill: false,\n                        tension: 0.1,\n                    },\n                    ],\n                }}\n            />\n        ) : null\n    );\n    const deathLineChart = (\n        dailyData[0] ? (\n            <Line\n                data={{\n                    labels: dates.map(date => new Date(date).toDateString()),\n                    datasets: [{\n                        data: allDeaths.map((data) => data),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        borderWidth: 0.1,\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true,\n                    },\n                    ],\n                }}\n            />\n        ) : null\n    );\n    return(\n        <Container maxWidth=\"md\">\n            <div className=\"card-container\" style={{ backgroundColor: props.themeState.cardBackground,\n                color: props.themeState.foreground}}>\n                <br/>\n                <Typography gutterBottom variant=\"h5\" component=\"h3\">\n                    <FontAwesomeIcon icon={faVirus}/> Total Infected & Recovered <FontAwesomeIcon icon={faHandHoldingMedical}/>\n                </Typography>\n                {infectedLineChart}\n            </div>\n            <div className=\"card-container\" style={{ backgroundColor: props.themeState.cardBackground,\n                color: props.themeState.foreground}}>\n                <br/>\n                <Typography gutterBottom variant=\"h5\" component=\"h3\">\n                    <FontAwesomeIcon icon={faSkullCrossbones}/> Total Deaths\n                </Typography>\n                {deathLineChart}\n            </div>\n        </Container>\n    )\n};\n","import React from \"react\";\n\nexport const themes = {\n    light: {\n        foreground: \"#242424\",\n        background: \"#FAFAFA\",\n        cardBackground: \"#FAFAFA\"\n    },\n    dark: {\n        foreground: \"#FAFAFA\",\n        background: \"#242424\",\n        cardBackground: \"#323232\"\n    }\n};\n\nexport const ThemeContext = React.createContext(themes);\n","import React,{lazy,Suspense,useState,useContext} from \"react\";\nimport './App.css';\nimport {HeaderComponent} from \"./components/Header\";\nimport {Loading} from \"./components/Skeleton\";\nimport {SelectCountry} from \"./components/SelectCountry\";\nimport {LineChart} from \"./components/LineChart\";\nimport {ThemeContext} from \"./context/ThemeContext\";\n\nconst Cards = lazy(() => import('./components/Cards'));\n\nconst App = () => {\n  const theme = useContext(ThemeContext);\n  const [themeState,setThemeState] = useState(theme.light);\n\n  return (\n    <section style={{\n        backgroundColor: themeState.background,\n        color: themeState.foreground\n    }}>\n        <HeaderComponent theme={theme} themeState={themeState} setThemeState={setThemeState}/>\n        <div className=\"app-container\">\n            <SelectCountry themeState={themeState}/>\n            <Suspense fallback={<Loading/>}>\n                <Cards themeState={themeState}/>\n            </Suspense>\n            <LineChart themeState={themeState}/>\n        </div>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ThemeContext} from \"./context/ThemeContext\";\nimport {themes} from \"./context/ThemeContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeContext.Provider value={themes}>\n          <App/>\n      </ThemeContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\n\nconst url =  'https://disease.sh/v3/covid-19/all';\n\nexport const fetchGlobalData = async () => {\n    try {\n        const {data: { cases , recovered, deaths, updated }} = await axios.get(url)\n\n        return { cases , recovered, deaths, updated };\n    }\n    catch (error){\n        return error;\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get('https://disease.sh/v3/covid-19/historical/all?lastdays=all');\n        return {data};\n    }\n    catch (error){\n        return error;\n    }\n}\nexport const fetchCountriesData = async () => {\n    try {\n        const { data } = await axios.get(`https://disease.sh/v3/covid-19/countries/`);\n\n        return data.map((country) => country.country);\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountryInfo = async (country) => {\n    try {\n        const { data } = await axios.get(`https://disease.sh/v3/covid-19/countries/${country}`);\n\n        return {data};\n    } catch (error) {\n        return error;\n    }\n}\nexport const fetchCountryDailyData = async (country) => {\n    try {\n        const {data} = await axios.get(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=all`);\n\n        return {data};\n    }\n    catch (error){\n        return error;\n    }\n}"],"sourceRoot":""}